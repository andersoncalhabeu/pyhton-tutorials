# Python Class Tutorial: Introduction to Classes in Python

# A class is a blueprint for creating objects (instances).
# Classes bundle data (attributes) and functionality (methods) together.

# Define a class named Cat
class Cat:
    # Constructor method: called when a new object is created.
    # `self` refers to the instance being created.
    def __init__(self, name, age):
        # Instance attribute - stores the cat's name.
        self.name = name
        # Instance attribute - stores the cat's age.
        self.age = age

    # Method that makes the cat "speak"
    def meow(self):
        # Use the cat's name and age in the message
        print(f"{self.name} says: Meow! I am {self.age} years old.")

    # Method to celebrate the cat's birthday
    def birthday(self):
        self.age += 1  # Increase age by 1
        print(f"Happy birthday, {self.name}! You are now {self.age} years old.")

# --- Creating and using objects ---

# Create a new Cat object (an instance of the class)
my_cat = Cat("Whiskers", 3)  # "Whiskers" is the name, 3 is the age

# Call (execute) the meow method on the instance
my_cat.meow()  # Output: Whiskers says: Meow! I am 3 years old.

# Celebrate the cat's birthday
my_cat.birthday()  # Output: Happy birthday, Whiskers! You are now 4 years old.

# We can access the attributes of the object directly
print(my_cat.name)  # Output: Whiskers
print(my_cat.age)   # Output: 4

# You can create as many objects as you want from the class
cat2 = Cat("Mittens", 2)
cat2.meow()  # Output: Mittens says: Meow! I am 2 years old.

# The `self` parameter is always the first parameter of a method.
# It refers to the current instance, so each cat keeps its own data.


# --- End of script ---
